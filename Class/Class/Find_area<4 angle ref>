//area of shapes USING VIRTUAL FUNCTION
#include <fstream>
#include <iostream>
using namespace std;
 
class Shape {
    
    public:
    virtual void calculate()
    {
        cout << "Area of Shape ";
    }
    // usage of virtual Destuctor to avoid memory leak
    // Declaring the destructor in the Shape class as virtual ensures that the destructors of derived classes (Rectangle and Square) are called correctly.
     //When an object of a derived class is destroyed, the destructor of the derived class is called first, followed by the destructor of the base class.
virtual ~Shape()
    {
        cout << "Shape Destuctor Call\n";
    }
};

class Rectangle : public Shape {
public:
    int width, height, area;
 
    void calculate()
    {
        cout << "Enter Width of Rectangle: ";
        cin >> width;
 
        cout << "Enter Height of Rectangle: ";
        cin >> height;
 
        area = height * width;
        cout << "Area of Rectangle: " << area << "\n";
    }
 
    // Virtual Destuctor for every Derived class
    virtual ~Rectangle()
    {
        cout << "Rectangle Destuctor Call\n";
    }
};

class Square : public Shape {
public:
    int side, area;
 
    void calculate()
    {
        cout << "Enter one side your of Square: ";
        cin >> side;
 
        area = side * side;
        cout << "Area of Square: " << area << "\n";
    }
  
    virtual ~Square()
    {
        cout << "Square Destuctor Call\n";
    }
};
 
int main()
{
    Shape* S;
    Rectangle r;

    S = &r;
    S->calculate();
    
    Square sq;
    S = &sq;
    S->calculate();

    return 0;
}
