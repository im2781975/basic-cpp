//how a virtual function can be private
#include <iostream>
using namespace std;
class base {
public:
    
    base() { cout << "base class constructor\n"; }
 
    // virtual base destructor
    // use when you know you
    // will inherit this class
    virtual ~base()
    {
        cout << "base class destructor\n";
    }
    
    void show()
    {
        cout << "show() called on base class\n";
    }
 
    virtual void print()
    {
        cout << "print() called on base class\n";
    }
};
 
class derived : public base {
    private:
    virtual void print()
    {
        cout << "print() called on derived class\n";
    }
    public:
    derived(): base()
    {
        cout << "derived class constructor\n";
    }
    // virtual derived destructor
    // always use when inheriting from a base class
    virtual ~derived()
    {
        cout << "derived class destructor\n";
    }
};
 
int main()
{
    cout << "printing with base class pointer\n";

    base* ptr = new derived();
 
    // call base class show()
    ptr->show();

    ptr->print();
 
    delete ptr;
}
