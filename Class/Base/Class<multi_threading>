#include <iostream>
#include <thread>
using namespace std;

// A dummy function
void foo(int Z) {
    for (int i = 0; i < Z; i++) {
        cout << "Thread using function"
             << " pointer as callable" << endl;
    }
}

// A callable object
class ThreadObj {
public:
    void operator()(int x) {
        for (int i = 0; i < x; i++)
            cout << "Thread using function"
                 << " object as callable" << endl;
    }
};

// class definition
class Base {
public:
    // non-static member function
    void foo() {
        cout << "Thread using non-static member function "
             << "as callable" << endl;
    }

    // static member function
    static void foo1() {
        cout << "Thread using static member function as "
             << "callable" << endl;
    }
};

int main() {
    cout << "Threads 1, 2, 3, 4, and 5 operating independently" << endl;

    // This thread is launched by using function pointer as callable
    thread th1(foo, 3);

    // This thread is launched by using function object as callable
    ThreadObj threadObj;
    thread th2(threadObj, 3);

    // This thread is launched by using lambda expression as callable
    auto lambda = [](int x) {
        for (int i = 0; i < x; i++)
            cout << "Thread using lambda"
                 << " expression as callable" << endl;
    };
    thread th3(lambda, 3);

    // Object of Base Class
    Base b;
   
    // This thread is launched by using a non-static member function of Base
    thread th4(&Base::foo, &b);

    // This thread is launched by using a static member function of Base
    thread th5(&Base::foo1);

    // Wait for the threads to finish
    th1.join();
    th2.join();
    th3.join();
    th4.join();
    th5.join();

    return 0;
}

