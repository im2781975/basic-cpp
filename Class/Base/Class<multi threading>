// multithreading using three
// different callables.
#include <iostream>
#include <thread>

using namespace std;

void foo(int Z)
{
    for (int i = 0; i < Z; i++) {
        cout << "\nThread using function pointer as callable";
    }
}

// A callable object
class thread_obj {
    public:
    void operator()(int x)
    {
        for(int i = 0; i < x; i++)
            cout << "\nThread using function obj as callable";
    }
};

class Base {
    public:
    
    void foo()
    {
        cout << "\nThread using non-static member function as callable";
    }
    
    static void foo1()
    {
        cout << "\nThread using static member function as callable";
    }
};
int main()
{
    cout << "\nThreads 1,2 & 3 operating independently";
 
    // This thread is launched by using function pointer as callable
    thread th1(foo, 3);
 
    // This thread is launched by using function object as callable
    thread th2(thread_obj(), 3);
    
    auto f = [](int x) {

        for(int i = 0; i <x; i++)

            cout << "\nThread using lambda expression as callable ";
    };
    // This thread is launched by using lambda expression as callable
    thread th3(f, 3);
 
    // object of Base Class
    Base b;

    thread th4(&Base::foo, &b);
    thread th5(&Base::foo1);
 
    //thread t1 to finish
    th1.join();
 
    // Wait for thread t2 to finish
    th2.join();
 
    // Wait for thread t3 to finish
    th3.join();
 
    // Wait for thread t4 to finish
    th4.join();
 
    // Wait for thread t4 to finish
    th5.join();
    return 0;
}
