#include <iostream>
using namespace std;

class Base
{
    public:
    static Base *Create(int id);
 
    Base() { }
 
    virtual
    ~Base() { }

    virtual void DisplayAction() = 0;
};
 
class Derived1 : public Base
{
public:
    Derived1()
    {
        cout <<"\nDerived1 created";
    }
    ~Derived1()
    {
        cout << "\nDerived1 destroyed";
    }
 
    void DisplayAction()
    {
        cout << "\nAction from Derived1" ;
    }
};
 
class Derived2 : public Base
{
public:
    Derived2()
    {
        cout << "\nDerived2 created" ;
    }
 
    ~Derived2()
    {
        cout << "\nDerived2 destroyed" ;
    }
 
    void DisplayAction()
    {
        cout << "\nAction from Derived2" ;
    }
};
 
class Derived3 : public Base
{
public:
    Derived3()
    {
        cout << "\nDerived3 created" ;
    }
 
    ~Derived3()
    {
        cout << "\nDerived3 destroyed" ;
    }
 
    void DisplayAction()
    {
        cout << "\nAction from Derived3" ;
    }
};

Base *Base::Create(int id)
{
 
    if( id == 1 )
    {
        return new Derived1;
    }
    else if( id == 2 )
    {
        return new Derived2;
    }
    else
    {
        return new Derived3;
    }
}

class User
{
    public:
    User() : pBase(nullptr)
    {
        int input;
 
        cout << "Enter ID (1, 2 or 3): ";
        cin >> input;
 
        while( (input !=  1) && (input !=  2) && (input !=  3) )
        {
            cout << "Enter ID (1, 2 or 3 only): ";
            cin >> input;
        }

        pBase = Base::Create(input);
    }
 
    ~User()
    {
        if( pBase )
        {
            delete pBase;
            pBase = nullptr;
        }
    }
 
    void Action()
    {
        pBase->DisplayAction();
    }
 
    private:
    Base *pBase;
};
int main()
{
    User *user = new User();

    user->Action();
 
    delete user;
}
