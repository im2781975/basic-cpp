#include <iostream>
using namespace std;

class Base {
    public:
};
class A {
    public:

    A() { cout << "User defined constructor" << "\n"; }
 
    int size;
};
 
class B : public A {
};
// The constructor of A is implicitly called before the constructor of C
// Constructor prints "\nC constructor" in addition to "\nUser defined Data Type" (due to A's constructor).
class C : public A {
    public:
    C()
    {
        cout << "C Constructor" << endl;
    }
};
 //Constructor prints "D constructor" in addition to "\nUser defined Data Type" (twice: once for the inherited part and once for the member object).
class D :public C{
    private:
    A a;
    
    public:
    D()
    {
        cout << "D Constructor" << endl;
    }
};

int main()
{
    Base base;
    
    B b;
    C c;
    D d;
 
    return 0;
}
