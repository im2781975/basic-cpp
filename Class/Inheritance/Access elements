//public, private & protected inheritance
#include <iostream>
using namespace std;
  
class Base {
    private:
    int pvt = 1;
  
    protected:
    int prot = 2;
  
    public:
    int pub = 3;
  
    int getPVT()
    { return pvt; }
};
  
class Prot_Derived : protected Base
{
    public:
    int getProt() { return prot; }
  
    int getPub() { return pub; }
};

class Priv_Derived : private Base {
    
    public:
    int getProt() { return prot; }
  
    int getPub() { return pub; }
};

class PublicDerived : public Base {
public:
//function to access protected member from Base
    int getProt() { return prot; }
};

int main()
{
    Prot_Derived C;
    cout << "Private cannot be accessed." <<"\n";
    cout << "Protected = " <<C.getProt() << "\n";
    cout << "Public = " << C.getPub() << "\n";
    
    Priv_Derived C2;
    cout << "Private cannot be accessed." << endl;
    cout << "Protected = " << C2.getProt() << endl;
    cout << "Public = " <<C2.getPub() << endl;
    
    PublicDerived C3;
    cout << "Private : " << C3.getPVT() << "\n";
    cout << "Protected : " << C3.getProt() <<"\n";
    cout << "Public : " << C3.pub << "\n";
    return 0;
}
