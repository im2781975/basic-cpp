#include<bits/stdc++.h>
using namespace std;
class cube
{
    int length;
    int *breadth;
    int hight;
    
    public:
    cube()
    {
        cout<<"construct called\n";
        breadth=new int;
    }
    void set(int l,int b,int h)
    {
        length=l;
        *breadth=b;
        hight=h;
    }
    void display()
    {
        cout<<"length is: "<<length<<"\n"<<"breadth is: "<<*breadth<<"\n"<<"hight is: "<<hight<<"\n";
    }
    // Parameterized deep copy Constructors 
    cube(cube &a)
    {
        length=a.length;
        breadth=new int;
        *breadth=*(a.breadth);
        hight=a.hight;
    }
    cube operator+(cube & cb)
    {
        cube newbox;
        newbox.length=this->length+cb.length;
        newbox.breadth=new int;
        *(newbox.breadth)=*breadth+*(cb.breadth);
        newbox.hight=this->hight+cb.hight;
        return newbox;
    }
    ~cube()
    {
        cout<<"destruct called\n";
        delete breadth;
    }
};
int main()
{
    cube c;
    c.set(12,13,14);
    c.display();
    cube d=c;
    d.display();
    cube e=c+d;
    e.display();
}
