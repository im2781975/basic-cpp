#include <iostream>

class Test {
public:
    virtual ~Test() = 0; // Pure virtual destructor
};

Test::~Test() {}

class Derived : public Test {
public:
    ~Derived() {
        std::cout << "~Derived() is executed" << std::endl;
    }
};

int main() {
    // You cannot create an instance of an abstract class directly.
    // Test p; // This will result in a compilation error.

    // Create an instance of the derived class using a pointer to the base class.
    Test* t1 = new Derived();

    // Make sure to delete it properly to call the destructor.
    delete t1;

    return 0;
}

