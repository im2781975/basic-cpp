#include<bits/stdc++.h>
using namespace std;
// To heapify a subtree rooted with node i which is an index in arr[]. n is size of heap.
void heapify(int arr[], int n, int i)
{
    // Initialize largest as root
    int largest = i; 
    
    // left = 2*i + 1
    int l = 2 * i + 1;
    
    // right = 2*i + 2
    int r = 2 * i + 2;
    
    if (l < n && arr[l] > arr[largest])
        largest = l;
    
    if (r < n && arr[r] > arr[largest])
        largest = r;
    
    // If largest is not root
    if (largest != i) {
        swap(arr[i], arr[largest]);
    
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
} 

void heapSort(int arr[], int n)
{
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    
    // One by one extract an element from heap
    for (int i = n - 1; i >= 0; i--) {
        // Move current root to end
        swap(arr[0], arr[i]);
    
        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}
    
/* A utility function to print array of size n */
void printArray(int arr[], int n)
{
    for (int i = 0; i < n; ++i)
        cout << arr[i] << " ";
    cout <<endl;
}
int main()
{
    int arr[] = { 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 };
    int n = 10;
    
    heapSort(arr, n);
    
    cout << "array after using heap sort:"<<endl;
    printArray(arr, n);
}

