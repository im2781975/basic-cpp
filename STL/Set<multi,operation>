// implementation of multiset
#include <iostream>
#include <iterator>
#include <set>
 
using namespace std;
 
int main()
{
    multiset<int, greater<int> > gquiz1;
    
    gquiz1.insert(40);
    gquiz1.insert(30);
    gquiz1.insert(60);
    gquiz1.insert(20);
    gquiz1.insert(50);

    gquiz1.insert(50);
    gquiz1.insert(10);

    multiset<int, greater<int> >::iterator itr;
    cout <<"multiset gquiz1 is : ";
    for (itr = gquiz1.begin(); itr != gquiz1.end(); ++itr) {
        cout << *itr << " ";
    }
    cout << " \n";
 
    // assigning the elements from gquiz1 to gquiz2
    multiset<int> gquiz2(gquiz1.begin(), gquiz1.end());
 
    cout << "The multiset gquiz2 after assign from gquiz1 is : ";
    for (itr = gquiz2.begin(); itr != gquiz2.end(); ++itr) {
        cout << *itr << " ";
    }
    cout << "\n";
 
    // remove all elements up to element with value 30 in gquiz2
    cout << "gquiz2 after removal of  less than 30 : ";
    gquiz2.erase(gquiz2.begin(), gquiz2.find(30));
    for (itr = gquiz2.begin(); itr != gquiz2.end(); ++itr) {
        cout << *itr << " ";
    }
    cout<<"\n" ;
 
    // remove all elements with value 50 in gquiz2
    int num;
    num = gquiz2.erase(50);
    cout << "gquiz2.erase(50) : ";
    cout << num << " removed \n";
    for (itr = gquiz2.begin(); itr != gquiz2.end(); ++itr) {
        cout << *itr << " ";
    }
    cout << "\n";
 
    // lower bound and upper bound 
    cout << "gquiz1.lower_bound(40) : "<< *gquiz1.lower_bound(40) << "\n";
    cout << "gquiz1.upper_bound(40) : " << *gquiz1.upper_bound(40) << "\n";
 
    cout << "gquiz2.lower_bound(40) : "<< *gquiz2.lower_bound(40) << "\n";
    cout << "gquiz2.upper_bound(40) : "<< *gquiz2.upper_bound(40) << "\n";
 
    return 0;
}
