// C++ Program to demonstrate the  
// increment and decrement operators 
#include <iostream> 
using namespace std; 
  
int main() 
{ 
    int x = 5; 
  
    // This statement Incremented 1 
    cout << "x++ is " << x++ << endl; 
  
    // This statement Incremented 1  
    // from already Incremented 
    // statement resulting in  
    // Incrementing of 2 
    cout << "++x is " << ++x << endl; 
  
    int y = 10; 
    
    // This statement Decremented 1 
    cout << "y-- is " << y-- << endl; 
  
    // This statement Decremented 1 
    // from already Decremented 
    // statement resulting in  
    // Decrementing of 2 
    cout << "--y is " << --y << endl; 
  
    return 0; 
}

// C++ program to demonstrate the use of 'unary minus'
// operator
 
#include <iostream>
using namespace std;
 
int main()
{
    int positiveInteger = 100;
    int negativeInteger = -positiveInteger;
 
    cout << "Positive Integer: " << positiveInteger << endl;
    cout << "Negative Integer: " << negativeInteger << endl;
 
    return 0;
}
// C++ program to demonstrate the use of 'address-of(&)'
// operator
#include <iostream>
using namespace std;
 
int main()
{
 
    int a = 10;
    int* ptr = &a; //& will give the address of a
    cout << "Address of a = " << ptr;
 
    return 0;
}
// C++ Program to demonstrate use of bitwise operators
#include <iostream>
using namespace std;
 
int main() {
    // a = 5(00000101), b = 9(00001001)
    int a = 5, b = 9;
 
    // The result is 00000001
    cout<<"a = " << a <<","<< " b = " << b <<endl;
    cout << "a & b = " << (a & b) << endl;
 
    // The result is 00001101
    cout << "a | b = " << (a | b) << endl;
 
    // The result is 00001100
    cout << "a ^ b = " << (a ^ b) << endl;
 
    // The result is 11111010
    cout << "~a = " << (~a) << endl;
 
    // The result is 00010010
    cout<<"b << 1" <<" = "<< (b << 1) <<endl;
 
    // The result is 00000100
    cout<<"b >> 1 "<<"= " << (b >> 1 )<<endl;
 
    return 0;
}
#include <iostream>
using namespace std;
 
// Function to return the only odd
// occurring element
int findOdd(int arr[], int n)
{
    int res = 0, i;
    for (i = 0; i < n; i++)
        res ^= arr[i];
    return res;
}
 
// Driver Method
int main(void)
{
    int arr[] = { 12, 12, 14, 90, 14, 14, 14 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "The odd occurring element is  "<< findOdd(arr, n);
    return 0;
}
#include <iostream>
using namespace std;
 
int main()
{
    int x = 2, y = 5;
    (x & y) ? cout <<"True " : cout <<"False ";
    (x && y) ? cout <<"True " : cout <<"False ";
    return 0;
}
#include <iostream>
using namespace std;
 
int main() {
 
    int x = 19;
    cout<<"x << 1 = "<< (x << 1) <<endl;
    cout<<"x >> 1 = "<< (x >> 1) <<endl;
    return 0;
}
#include <iostream>
using namespace std;
 
int main() {
 
    int x = 19;
    cout<<"x << 1 = "<< (x << 1) <<endl;
    cout<<"x >> 1 = "<< (x >> 1) <<endl;
    return 0;
}
#include <iostream>
using namespace std;
 
int main() {
 
    int x = 19 ;
    (x & 1) ? cout<<"Odd" : cout<< "Even" ;
       
    return 0;
}
#include <iostream>
using namespace std;
 
int main() {
 
    unsigned int x = 1;
    signed int a = 1;
    cout<<"Signed Result "<< ~a <<endl ;
    cout<<"Unsigned Result "<< ~x ;
    return 0;
}

